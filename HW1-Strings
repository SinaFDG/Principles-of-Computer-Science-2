#alphabet rangoli
def print_rangoli(size):
    # your code goes here
    import string
    width = 4 * size - 3
    alpha = string.ascii_lowercase
    for i in list(range(size))[::-1] + list(range(1, size)):
        print('-'.join(alpha[size-1:i:-1] + alpha[i:size]).center(width, '-'))

------------
#designer door mat
# Enter your code here. Read input from STDIN. Print output to STDOUT
n, m = map(int,input().split())
pattern = [('.|.'*(2*i + 1)).center(m, '-') for i in range(n//2)]
print('\n'.join(pattern + ['WELCOME'.center(m, '-')] + pattern[::-1]))

------------
#find a string
def count_substring(string, sub_string):
    count=0
    for i in range(0, len(string)-len(sub_string)+1):
        if string[i] == sub_string[0]:
            flag=1
            for j in range (0, len(sub_string)):
                if string[i+j] != sub_string[j]:
                    flag=0
                    break
            if flag==1:
                count += 1    
    return count

-----------
#mutations
def mutate_string(string, position, character):
    a = string [:position] + character + string [position+1:]
    return a

-----------
#string formatting
def print_formatted(number):
    width = len("{0:b}".format(n))
    for i in range(1, n + 1):
        print ("{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}".format(i, width=width))
        
    # your code goes here

----------
#string split and join
def split_and_join(line):
    # write your code here
    a = line.split()
    a = '-'.join(a)
    return a

-----------
#string validators
if __name__ == '__main__':
    s = input()
for i in ['isalnum','isalpha','isdigit','islower','isupper']:
    print(any(eval('j.'+i+'()') for j in s))

-------------
#swap case
def swap_case(s):
    a = ''
    for letter in s:
        if letter == letter.upper():
            a += letter.lower()
        else:
            a += letter.upper()

    return a

------------
#text alignment
#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

--------------
#text wrap
def wrap(string, max_width):
    t = textwrap.fill(string,max_width)
    return t


