#big sorting
#!/bin/python3

import sys

n = int(input().strip())
bucket = {}

for _ in range(n):
    number = input().strip()
    length = len(number)
    
    if not length in bucket:
        bucket[length] = []
    
    bucket[length].append(number)

for key in sorted(bucket):
    for value in sorted(bucket[key]):
        print(value)

-----------
#closest numbers
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the closestNumbers function below.
def closestNumbers(arr):
    sorted_arr = sorted(arr)
    diff = []
    for i in range(len(sorted_arr) - 1):
        diff.append(sorted_arr[i+1] - sorted_arr[i])
    value = min(diff)
    result = []
    for i in range(len(sorted_arr) - 1):
        if (sorted_arr[i+1] - sorted_arr[i]) == value:
            result.append(sorted_arr[i])
            result.append(sorted_arr[i+1])
    return result
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = closestNumbers(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

-----------
#correctness and the loop invariant
def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key
    return(l)

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

-----------
#counting sort 1
#!/bin/python3

k = int(input())
results = [0]*k

for i in input().split(' '):
    results[int(i)] += 1

if k != 100:
    print(' '.join([repr(num) for num in results if num]))
else:
    print(' '.join([repr(num) for num in results]))

-------------
#counting sort 2
#!/bin/python3

def count(ar):
    out = [0] * 100
    for i in ar:
        out[i] += 1

    return out

def printOrdered(arr):
    for i in range(0, 100):
        for j in range(0, arr[i]):
            print(i, end=' ')


m = input()
ar = [int(i) for i in input().strip().split()]
printOrdered(count(ar))

--------------
#insertion sort - part 1
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort1 function below.
def insertionSort1(n, arr):
    x = arr[n-1]
    for i in range(n-2):
        if arr[n-i-2]>x:
            arr[n-i-1]= arr[n-i-2]
            print(*arr, sep=' ')
        else:
            arr[n-i-1] = x
            print(*arr, sep=' ')
            break
    if arr[1] > x:
        if arr[0] >x:
            arr[1] = arr[0]
            print(*arr, sep=' ')
            arr[0]=x
            print(*arr, sep=' ')
        else:
            arr[1] = x
            print(*arr, sep=' ')

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)

---------------
#insertion sort - part 2
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort2 function below.
def insertionSort2(n, arr):
    for i in range (1 , len (arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
            arr[j + 1] = key
        print(*arr)

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)

--------------
#intro to tutorial challenges
#!/bin/python3

p=eval(input())
n=eval(input())
lis=[int(x) for x in input().split()]
print(lis.index(p))

--------------
#quicksort 1 - partition
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the quickSort function below.
def quickSort(arr):
    p = arr[0]
    left = []
    right = []
    for i in arr:
        if i >= p:
            right.append(i)
        elif i < p:
            left.append(i)
    equal = left + right
    return (equal)


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

---------------
#running time of algorithms
#!/bin/python3

import math
import os
import random
import re
import sys


# Complete the runningTime function below.
def runningTime(arr):
    shift = 0
    for i in range(1, n):
        x = arr[i]
        for j in range(i):
            if j >= 0 and arr[j] > x:
                arr[i], arr[j] = arr[j], arr[i]
                shift += 1
    return shift


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()





